#!/bin/bash

##script to set up environment

#module purge
module load PrgEnv-gnu/8.3.3
module load amd-mixed
module load cray-python
module load rocm
module load craype-accel-amd-gfx90a
module load cray-libsci
module load gdb4hpc

export WRAP=WRAP
export TOOLKIT=GNU
export MPILIB=MPICH
export PATH_MPICH=${CRAY_MPICH_PREFIX}
export BUILD_TYPE=OPT
export BLASLIB=LIBSCI
export EXA_OS=LINUX
export PATH_BLAS_LIBSCI=${CRAY_LIBSCI_PREFIX_DIR}/lib
export GPU_CUDA=CUDA
export GPU_SM_ARCH=90
export USE_HIP=YES
export PATH_ROCM=${ROCM_PATH}

#missing linking?
#-I${MPICH_DIR}/include
#-L${MPICH_DIR}/lib -lmpi \
#  ${CRAY_XPMEM_POST_LINK_OPTS} -lxpmem \
#  ${PE_MPICH_GTL_DIR_amd_gfx90a} ${PE_MPICH_GTL_LIBS_amd_gfx90a}


#running with script
# ExaTENSOR environment
export QF_PROCS_PER_NODE=4        #number of MPI processes per node
export QF_CORES_PER_PROCESS=4     #number of physical CPU cores per MPI process (no less than 1)
export QF_MEM_PER_PROCESS=120000  #host RAM memory limit per MPI process in MB
export QF_NVMEM_PER_PROCESS=0    #non-volatile memory limit per MPI process in MB
export QF_HOST_BUFFER_SIZE=125000 #host buffer size per MPI process in MB (less than QF_MEM_PER_PROCESS!)
#export QF_GPUS_PER_PROCESS=0      #number of discrete NVIDIA GPUs per MPI process (optional)
#export QF_MICS_PER_PROCESS=0      #number of discrete Intel Xeon Phis per MPI process (optional)
#export QF_AMDS_PER_PROCESS=1      #number of discrete AMD GPUs per MPI process (optional)
export QF_NUM_THREADS=4          #initial number of CPU threads per MPI process (irrelevant)

#running with script
# OpenMP environment
export OMP_NUM_THREADS=$QF_NUM_THREADS     #initial number of OpenMP threads per MPI process (=QF_NUM_THREADS)
export OMP_DYNAMIC=false                   #no OpenMP dynamic threading
export OMP_NESTED=true                     #OpenMP nested parallelism is mandatory
export OMP_MAX_ACTIVE_LEVELS=3             #max number of OpenMP nesting levels (at least 3)
export OMP_THREAD_LIMIT=256                #max total number of OpenMP threads per process
export OMP_WAIT_POLICY=PASSIVE             #idle thread behavior
export OMP_PROC_BIND="close,spread,spread" #nest1: Functional threads (DSVU)
                                           #nest2: TAVP-WRK: Dispatcher spawns coarse-grain Executors
                                           #nest3: TAVP-WRK: Executor spawns threads in CP-TAL kernels
export OMP_STACKSIZE=200M                  #stack size needed to avoid segmentation fault
export OMP_PLACES=cores                    #default thread binding to CPU logical cores

#additional env
export MPICH_GPU_SUPPORT_ENABLED=1
export MPICH_GPU_MANAGED_MEMORY_SUPPORT_ENABLED=1
export HIPFLAGS='--amdgpu-target=gfx90a'
export CXX='CC –x hip'
export LDFLAGS=" –L${ROCM_PATH}/lib"
export LIB=' -lamdhip64'

ulimit -s unlimited

